EventLoops:

Phases Overview
1.timers: this phase executes callbacks scheduled by setTimeout() and setInterval().
2.pending callbacks: executes I/O callbacks deferred to the next loop iteration.
3.idle, prepare: only used internally.
4.poll: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.
5.check: setImmediate() callbacks are invoked here.
6.close callbacks: some close callbacks, e.g. socket.on('close', ...).


Understandings:
----------------
If the js code running in synchronous manner then it works normally like call stack in js which is same
as saini lecture

If the code runs in asynchronous manner then the callbacks are pushed on to the libuv in order to 
execution, the flow of execution is mentioned below.

Flow:
-------
1.timer queue contains callbacks associated with setTimeout and setInterval

2.I/O queue contains all the async methods associated with fs and http

3.check queue which contains callbacks associated with setImmediate

4.close queue contains all the close events associated with the code

-----!------The above four are associated with libuv--------!----------


5.MicroTask queue
    i. nextTick queue
    ii. promise queue


Notes:
----------
After the callStack gets empty then only the eventLoop takes place

Event Loop Execution Order:
-----------------------------------
1.First all the microtasks are executed first in the nextTick queue and then the Promise queue

Note:
-----------
After first execution all the remaining process gets execute and will check for microtask for each function
call whether is there any callbacks available

2.All the callback in the timer Queue are executed

3.All callbacks in the I/O queue are executed

4.All callbacks with checkqueue are executed

5.All callbacks in the close queue are executed

6.MicroTask queue are executed after I/O before checkqueue

microTask Queue:
-------------------
1.If you have any nested callback of nextTick queue then it is placed on the last of the queue 
It may be promise or nextTick

EX:

process.nextTick(()=>{
    console.log('"hi1"');
        process.nextTick(()=>{
         console.log('"hi2"');
    })
})
process.nextTick(()=>console.log('"hi3"'))

Promise.resolve().then(data=>console.log('hi4'))

Promise.resolve().then((data)=>{
    console.log('hi5')
    process.nextTick(()=>{
         console.log('hi6')
    })
})

Promise.resolve().then(data=>console.log('hi7'))


o/p:
-----
hi1
hi3
hi2
hi4
hi5
hi7
hi6


How events occurs:
------------------------
process.nextTick to queue into nextTick queue
resolve,reject to queue into promise queue
setTimeout to timer queue
async code to I/O queue
setImmediate code to checkqueue
close event listener methods to close queue





